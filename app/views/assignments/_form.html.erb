<script src="https://unpkg.com/jszip@3.7.1/dist/jszip.js" type="text/javascript"></script>

<%= form_for([@course, @assignment]) do |f| %>
  <% if @assignment.errors.any? %>
    <div id="error_explanation">
      <h6><%= pluralize(@assignment.errors.count, "error") %> prohibited this assignment from being saved:</h6>
      <ul>
      <% @assignment.errors.full_messages.each do |msg| %>
        <li><%= msg %></li>
      <% end %>
      </ul>
    </div>
  <% end %>
  <%= hidden_field_tag "which_form", (@assignment.id ? "update_assignment" : "new_assignment"), { :id => "which-form" } %>
  <div class="row">
  <p> Hover over â“˜ for more details about any terminology.</p>
  <div class="col-12">  
    <%= f.label :title, class: "form-label" %>
    <%= f.text_field :title, class: "form-control" %>
  </div>
  <div class="col-12">
    <%= f.label :language, class: "form-label" %>
    <%= f.select :language, Assignment.options_for_languages, {}, { :class => 'form-select' } %>
  </div>
  <div class="col-sm-6">  
    <%= f.label :min_match_length, "Minimum Match Length \u24D8" , title: "The least number of contiguous identical statements required to flag a match." , class: 'form-label' %>
    <%= f.text_field :min_match_length, class: 'form-control' %>
  </div>
  <div class="col-sm-6">
    <%= f.label :ngram_size, "Size of n-gram \u24D8", title: "An n-gram is a contiguous subsequence of n tokens of a given sequence.", class: 'form-label' %>
    <%= f.text_field :ngram_size, class: 'form-control' %>
  </div>
  <div class="col-12">
    <%= f.label :file, "Student submissions (zip) \u24D8", title: "The zip file should contain one folder for each student's code files; folders are named according to student ID; Name your folder as \"skeleton\" for the codes you wish to exclude from the system", class: 'form-label' %>
    <%= f.file_field :file, class: 'form-control' %>
    <ul id="student_submissions_zip_files_list"></ul>
  </div>
  
  <div class="col-12">
  <%= f.label :mapbox, "Upload map file?" %>
  <%= f.check_box :mapbox, { :class => 'form-check-input' }, "Yes", "No" %>
  </div>
  <div id="map_file_details" style="display:none;" class="col-12">
  <%= f.label :mapfile, "Mapping file (csv) \u24D8", title: "The zip file should contain one folder for each student's code files; folders are named according to student ID; Name your folder as \"skeleton\" for the codes you wish to exclude from the system", class: 'form-label' %>
  <%= f.file_field :mapfile, accept: '.csv', class: 'form-control' %>
  <ul id="map_files_list"></ul>

  </div>
  <div>
    <%= f.submit class: "submit" %>
  </div>
  </div>
<% end %>

<script type="text/javascript">
  var checkbox = document.getElementById('assignment_mapbox');
  var details_div = document.getElementById('map_file_details');
  checkbox.onchange = function() {
     if(this.checked) {
       details_div.style['display'] = 'block';
     } else {
       details_div.style['display'] = 'none';
     }
  };
  window.addEventListener('DOMContentLoaded', () => {
    console.log($('which-form').val());
    if ($('#which-form').val() === "update_assignment") {
      document.querySelector('#assignment_title').disabled = true;
      document.querySelector('#assignment_language').disabled = true;
      document.querySelector('#assignment_min_match_length').disabled = true;
      document.querySelector('#assignment_ngram_size').disabled = true;
    }
  })
  
  $("#assignment_file").attr("onchange", "onAssignmentFileInputChange(this)");

  function onAssignmentFileInputChange(fileInput) {
    if (fileInput.files[0] == undefined) {
      return;
    }
    let reader = new FileReader();
    reader.onload = (ev) => {
      JSZip.loadAsync(ev.target.result)
        .then(function (zip) {
          var zipObjectNames = Object.keys(zip.files);
          var fileNames = zipObjectNames.filter(
            (x) => x.charAt(x.length - 1) != "/"
          );
  
          // Reset existing file list
          $("#student_submissions_zip_files_list").empty();
  
          // Display the first ten files
          $("#student_submissions_zip_files_list").prepend("<br>");
          for (let i = 0; i < Math.min(10, fileNames.length); i++) {
            let fileName = fileNames[i];
            $("#student_submissions_zip_files_list").append(
              "<li><a href=# id=preview_file_" + i + ">" + fileName + "</a></li>"
            );
  
            let handleClick = function () {
              zip
                .file(fileName)
                .async("string")
                .then((fileContent) => {
                  previewRawFile(fileName, fileContent);
                  return false;
                });
            };
  
            $("#preview_file_" + i).click(handleClick);
          }
  
          // Indicate that there are more files
          if (fileNames.length > 10) {
            $("#student_submissions_zip_files_list").append("<li>...</li>");
          }
        })
        .catch((err) => {
          console.error("Error trying to unzip and process", filename);
          console.error(err);
        });
    };
    reader.onerror = (err) => {
      console.error("Error trying to read file", err);
    };
    reader.readAsArrayBuffer(fileInput.files[0]);
  }

  $("#assignment_mapfile").attr("onchange", "onAssignmentMapFileInputChange(this)");

  function onAssignmentMapFileInputChange(fileInput) {
    if (fileInput.files[0] == undefined) {
      return;
    }
    
    let fileName = fileInput.files[0].name;
    let reader = new FileReader();

    // Reset existing file list
    $("#map_files_list").empty();

    // Show newly chosen file
    $("#map_files_list").prepend("<br>");

    $("#map_files_list").append(
      "<li><a href=# id=preview_map_file>" + fileName + "</a></li>"
    );

    reader.onload = function() {
      callback(reader.result);
    }
    
    reader.readAsText(fileInput.files[0]); 

    reader.onerror = (err) => {
      console.error("Error trying to read file", err);
    };

    let handleClick = () => previewRawFile(fileName, reader.result);

    $("#preview_map_file").click(handleClick);
  }

  function previewRawFile(fileName, fileContent) {
    let newWindow = window.open("about:blank");
    newWindow.document.write("<title>" + fileName + "</title>");
    newWindow.document.write("<pre>" + fileContent + "</pre>");
  }
  
</script>

